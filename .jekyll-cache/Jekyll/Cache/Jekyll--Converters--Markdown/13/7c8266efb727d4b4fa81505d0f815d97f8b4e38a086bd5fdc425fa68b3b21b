I"^<h3 id="一概念">一、概念</h3>

<h4 id="gc">GC</h4>

<p>当程序向操作系统申请的内存不再需要时，垃圾回收主动将其回收并供其他代码进行内存申请时候复用，<br />
或者将其归还给操作系统，这种针对内存级别资源的自动回收过程，即为垃圾回收</p>

<p><img src="https://i.postimg.cc/G29tGnKh/2023-08-08-1123.png" alt="GC示意图" /></p>

<h3 id="二常见回收算法">二、常见回收算法</h3>

<p><strong>1.引用计数</strong>  <br />
  代表语言：
 <strong>php、Python</strong>  <br />
  优点: 
 实现简单、 即时回收、 内存利用率高、不暂停程序    <br />
  缺点: 
 循环引用无法回收、成本较高，需要维护计数器变量、无法保证响应时间</p>

<p><strong>2.追踪式</strong>  <br />
     <strong>标记复制</strong><br />
      将内存分为相同两块，一块内存使用完之后把对象复制到另一块内存，恢复第一块内存
	 优点：解决内存碎片化，防止分配较大连续内存空间的GC问题
	 缺点：内存利用率低</p>

<p>  <strong>标记清除</strong> <br />
	 优点：空间利用率高，不需要额外空间复制对象，也不需要给每个对象设置引用计数器
	 缺点：可能产生大量碎片，导致下一次GC提前</p>

<p>  <strong>标记整理</strong><br />
     分代式：根据存活时间分为年轻代，老年代，永久代；如果一个对象存活时间不长则倾向于被回收</p>

<h3 id="三go-gc-三色标记清扫算法">三、GO GC 三色标记清扫算法</h3>
<p> <strong>标记阶段：</strong> 从根对象出发查找并标记堆中所有存活的对象；  <br />
 <strong>清除阶段：</strong> 遍历堆中的全部对象，回收未被标记的垃圾对象并将回收的内存加入空闲链表</p>

<p>dui xiang</p>
:ET