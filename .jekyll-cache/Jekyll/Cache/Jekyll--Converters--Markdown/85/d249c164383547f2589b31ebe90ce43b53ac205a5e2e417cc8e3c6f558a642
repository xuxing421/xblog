I"
<h3 id="一概念">一、概念</h3>

<h4 id="gc">GC</h4>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="err">当程序向操作系统申请的内存不再需要时，垃圾回收主动将其回收并供其他代码进行内存申请时候复用，</span>
<span class="err">或者将其归还给操作系统，这种针对内存级别资源的自动回收过程，即为垃圾回收</span></code></pre></figure>

<h3 id="二常见回收算法">二、常见回收算法</h3>

<p><strong>引用计数 GC</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="err">代表语言：</span>
<span class="n">php</span><span class="err">、</span><span class="no">Python</span>
<span class="err">优点</span><span class="p">:</span> 
<span class="err">实现简单、</span> <span class="err">即时回收、</span> <span class="err">内存利用率高、不暂停程序</span>
<span class="err">缺点</span><span class="p">:</span> 
<span class="err">循环引用无法回收、成本较高，需要维护计数器变量、无法保证响应时间</span> </code></pre></figure>

<p><strong>追踪式GC</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">    <span class="err">标记—复制算法</span>
	<span class="err">将内存分为相同两块，一块内存使用完之后把对象复制到另一块内存，恢复第一块内存</span>
	<span class="err">优点：解决内存碎片化，防止分配较大连续内存空间的</span><span class="no">GC</span><span class="err">问题</span>
	<span class="err">缺点：内存利用率低</span>

    <span class="err">标记—清除算法</span>
	<span class="err">优点：空间利用率高，不需要额外空间复制对象，也不需要给每个对象设置引用计数器</span>
	<span class="err">缺点：可能产生大量碎片，导致下一次</span><span class="no">GC</span><span class="err">提前</span>

    <span class="err">标记—整理</span>
    <span class="err">分代式：根据存活时间分为年轻代，老年代，永久代；如果一个对象存活时间不长则倾向于被回收</span></code></pre></figure>

<h3 id="三go-gc-三色标记清扫算法">三、GO GC 三色标记清扫算法</h3>
<p><strong>标记阶段：</strong>从根对象出发查找并标记堆中所有存活的对象；</p>

<p><strong>清除阶段：</strong>遍历堆中的全部对象，回收未被标记的垃圾对象并将回收的内存加入空闲链表</p>

:ET